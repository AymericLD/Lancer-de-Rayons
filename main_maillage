#include "lancer_rayon.h"
#include "lancer_rayon.cpp"
#include <sstream>

int main()
{
/*
  {
    //test output file
    ofstream myfile;
    myfile.open ("example.txt");
    myfile << "Writing this to a file.\n";
    myfile << "Writing some more.\n";
    myfile.close();
  }
*/
/*
  {
    //test de la classe Vecteur
    Vecteur O(1,1,0), P(1,0,-2), Q(0,3,1), R;
    cout << "O=" << O << " P=" << P << " Q=" << Q << " R=" << R << endl;
    cout << "O + P + 2.*Q - R/2.=" << (O+P+2.*Q-R/2.) << endl;
    cout << "O!=P -> " << (O!=P?"true":"false") << " O==P -> " << (O==P?"true":"false") << endl;
    cout << "O*P=" << O*P << "\n" << endl;
  }
*/
/*
  {
    //test de la classe Sphere
    Sphere S;
    cout << "S.centre=" << S.centre << " S.rayon=" << S.rayon << endl;
  }
*/
/*
  {
    //test de la classe Rayon
    Vecteur O(1,1,0), P(1,0,-2);
    Rayon I(O,P);
    cout << "I.origine=" << I.origine << " I.direction=" << I.direction << "\n" << endl;
  }
*/
/*
  {
    //test de la fonction intersection
    Vecteur O(0,2), e1(1,0), e2(3,2), P(6,2), Q(5,5);
    Sphere S1(P), S2(Q);
    Rayon R1(O,e1), R2(O,e2);
    cout << "R1 intersects S1 -> " << (intersection(R1,S1)?"true":"false") << endl;
    cout << "R1 intersects S2 -> " << (intersection(R1,S2)?"true":"false") << endl;
    cout << "R2 intersects S1 -> " << (intersection(R2,S1)?"true":"false") << endl;
    cout << "R2 intersects S2 -> " << (intersection(R2,S2)?"true":"false") << "\n" << endl;
    cout << "R1 intersects S1 at point " << intersection_point(R1,S1) << endl;
    cout << "R2 intersects S2 at point " << intersection_point(R2,S2) << "\n" << endl;
  }
*/
/*
  {
    //test de la class Source
    Vecteur O, P(1,1,1);
    uint8_t R = 2;
    cout << R << endl;
    cout << +R << "\n" << endl;
    Source S, T(P,8,75,255);
    cout << "S.position=" << S.position << endl;
    cout << "T.position=" << T.position << endl;
    cout << "S.rgb()=" << S << endl;
    cout << "T.rgb()=";
    T.rgb();
    cout << "\n";
  }
*/
/*
  {
    //test de la classe Pixel
    Vecteur O(1,0,-1);
    Pixel P;
    Pixel Q(O, 2., 15, 65, 115);
    cout << "P.centre=" << P.centre << " P.taille=" << P.taille << " P.rgb()=" << P << endl;
    cout << "Q.centre=" << Q.centre << " Q.taille=" << Q.taille << " Q.rgb()=";
    Q.rgb();
    cout << "\n";
  }
*/
/*
  {
    //test de la classe Grille
    Grille G(3,2,1.);
    int k = G.table.size();
    cout << "Nombre de pixels = " << k << endl;
    cout << "Liste positions pixels:" << endl;
    for (int i=0;i<k;i++)
    {
      cout << G.table[i].r << " " << G.table[i].g << " " << G.table[i].b << endl;
    }
    cout << "\n" << endl;
    G.creation_image();
  }
*/


///Lecture du fichier texte


    string filename = "geomCarre.msh"; // le nom de votre fichier gmsh
    ifstream file(filename);
    string line;
    bool read_nodes = false;
    bool read_triangles = false;
    vector<vector<double>> nodes;
    vector<vector<double>> triangles;

    // Lecture du fichier
    while (getline(file, line)) {
        if (line.find("$Nodes") != string::npos) {
            read_nodes = true;
        } else if (line.find("$EndNodes") != string::npos) {
            read_nodes = false;
        } else if (line.find("$Elements") != string::npos) {
            read_triangles = true;
        } else if (line.find("$EndElements") != string::npos) {
            read_triangles = false;
        } else if (read_nodes) {
            // Lire les noeuds si nous sommes dans la section $Nodes
            // Ignorer la première ligne
            if (line[0] != '$') {
                stringstream ss(line);
                int node_id;
                double x, y, z;
                ss >> node_id >> x >> y >> z;
                // Ajouter les coordonnées des nœuds à notre vecteur de nœuds
                nodes.push_back({x, y, z});
            }
        } else if (read_triangles) {
            // Lire les triangles si nous sommes dans la section $Elements
            // Ignorer la première ligne
            if (line[0] != '$') {
                stringstream ss(line);
                int elem_id, elem_type, num_tags, n1, n2, n3,a,b;
                ss >> elem_id >> elem_type >> num_tags;
                // Vérifier si c'est un triangle (type 2) et récupérer les nœuds
                if (elem_type == 2) {
                    ss >> a >> b >> n1 >> n2 >> n3;
                    // Ajouter les coordonnées des nœuds du triangle à notre vecteur de triangles
                    triangles.push_back(nodes[n1-1]);
                    triangles.push_back(nodes[n2-1]);
                    triangles.push_back(nodes[n3-1]);
                }
            }
        }
    }

    Maillage M;

    // Afficher les coordonnées des nœuds de chaque triangle
    for (int i = 0; i < triangles.size(); i += 3) {
        Vecteur sommet1(triangles[i][0],triangles[i][1],triangles[i][2]);
        Vecteur sommet2(triangles[i+1][0],triangles[i+1][1],triangles[i+1][2]);
        Vecteur sommet3(triangles[i+2][0],triangles[i+2][1],triangles[i+2][2]);
        Triangle tri;
        tri.s.resize(3);
        tri.s[0] = sommet1;
        tri.s[1] = sommet2;
        tri.s[2] = sommet3;
        M.t.push_back(tri);
    }
    for (int i = 0; i < triangles.size()/3; i += 1) {
        cout << M.t[i].s[0] << endl;
    }
    M.translation();
    Maillage scene;
    scene = M;
    Vecteur P(5,5,4); //position de la source lumineuse
    Source L(P,250,250,250); //lumiere blanche
    Grille G(150,150,0.09); //grille de pixels
    Vecteur e1(0,0,1); //direction de tous les rayons partant des pixels
    vector<double> k = {1,sqrt(2)/2,sqrt(2)/2}; //ka, kd, kr
    int n = 1;
    int a = 1;
    for (auto p=G.table.begin();p!=G.table.end();p++)
    {
      Rayon R(p->centre,e1);
      Triangle triangle_inter;
      Vecteur point_inter(0,0,1000);
      bool intersect = false;
      for (auto s=scene.t.begin();s!=scene.t.end();s++)
      {
      if (intersection_triangle_bool(R,*s))
        {
          a += 1;
          cout << a << endl;
          intersect = true;
          Vecteur new_point_inter = intersection_triangle_point(R,*s);
          if ((new_point_inter-p->centre)*(new_point_inter- p->centre) <= (point_inter-p->centre)*(point_inter-p->centre)) //lequel est le plus proche
          {
            point_inter = new_point_inter;
            triangle_inter = *s;
          }
        }
      }
      if (!intersect) {continue;}
      Rayon R2(point_inter,L.position - point_inter); //shadow ray
      bool obstacle = false;

      for (auto s=scene.t.begin();s!=scene.t.end();s++)
        {
        if (intersection_triangle_bool(R2,*s) && *s!=triangle_inter) //vérifier si nouveau point appartient au meme objet
            {
                obstacle = true;
                continue;
            }

      if (!obstacle) {
        calcul_intensite_triangle(*p,L,point_inter,triangle_inter,k,n); //a redefinir
      }

    }
    G.creation_image();
    }
  return 0;

}

// Adaptder le calcul d'intensité, trouver une autre condition pour les triangles intersectants mais pas éclairés, corriger std, fichier maillage
